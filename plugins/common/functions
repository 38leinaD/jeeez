#!/usr/bin/env bash
set -eo pipefail; [[ $JZ_TRACE ]] && set -x

RESTORE='\033[0m'
RED='\033[00;91m'
WHITE='\E[1;37m'
GREEN='\033[00;92m'
CYAN='\E[1;36m'

has_tty() {
  if [[ "$(/usr/bin/tty || true)" == "not a tty" ]]; then
    return 1
  else
    return 0
  fi
}

create_file_from_template() {
    eval "cat <<EOF
$(<$2)
EOF" > $1
}

ask_yes_no() {
    while true; do
        read -p "$1 [(y)es,(n)o] " yn
        case $yn in
            [Yy]* ) return 0; break;;
            [Nn]* ) return 1; break;;
            * ) echo "Please answer yes or no.";;
        esac
    done    
}

parse_args() {
  local next_index=1; local skip=false; local args=("$@")
  for arg in "$@"; do
    $skip && skip=false && continue
    case "$arg" in
      --trace)
        export JZ_TRACE=1
        ;;
      --debug)
        export JZ_DEBUG=1
        ;;
    esac
    local next_index=$(( next_index + 1 ))
  done
  return 0
}

log_info() {
    echo -en "\E[1;36m|\E[0;0m $*\n" >&2
}

log_success() {
    echo -en "\E[1;32m|\E[0;0m $*\n" >&2
}

log_warn() {
    echo -en "\E[33m|\E[0m $*\n" >&2
}

log_err() {
    echo -en "\E[31m|\E[0m $*\n" >&2
    #if [ -x "$(command -v notify-send)" ]; then
    #    notify-send -u critical "$*"
    #fi
}

log_debug() {
    [[ $JZ_DEBUG == 1 ]] && echo -en "${CYAN}[DEBUG]${RESTORE} $*\n" || true
}

root_walk() {
    f=$1
    path_node=$(pwd)
    while true; do
        if [[ $path_node == / ]]; then
            # nothing found
            break
        elif [ -f "${path_node}/$f" ]; then
            # found
            echo "$path_node/$f"
            break
        else
            # go up
            path_node="$(dirname "$path_node")"
        fi
    done
}