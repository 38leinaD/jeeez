#!/usr/bin/env bash
set -eo pipefail; [[ $JZ_TRACE ]] && set -x
source "$PLUGIN_PATH/common/functions"
source "$PLUGIN_PATH/project/functions"

list_features() {
    # TODO: Print nice description for templates
    find $PLUGIN_PATH/project/features -maxdepth 1 -type d -print | tail -n +2 | rev | cut -d'/' -f 1 | rev
}

usage() {
    templates=$(list_features | paste -sd "|" -)
    echo "Usage: jz project:add [groupid.]artifactid feature [OPTIONS]"
    echo ""
    echo "Adds a feature to the project."
}



add_feature() {
    local feature_name=$1
    local feature_folder="feature.${feature_name}"
    local tmpdir=$(mktemp -d)
    local workdir=$tmpdir/$feature_folder

    apply_template $feature_folder $tmpdir
    
    (
        cd $workdir/main
        log_info "The following files where generated by the feature ${feature_name}:"
        for f in $(find . -name '*' -type f); do
            log_info " - $f"
        done
    )
    # Cannot do simple move because folders might already exists; need to merge
    (
        cd $workdir/main/
        find . -type d -exec mkdir -p $jz_pj_folder_path/{} \; 
        find . -type f -exec mv {} $jz_pj_folder_path/{} \;
    )

    if [[ -d $workdir/st && -d ${jz_pj_folder_path}-st ]]; then
        cd $workdir/st
        log_info "The following files where generated by the feature ${feature_name} in the system-test project:"
        for f in $(find . -name '*' -type f); do
            log_info " - $f"
        done
    fi
    
    # Cannot do simple move because folders might already exists; need to merge
    (
        cd $workdir/st/
        find . -type d -exec mkdir -p ${jz_pj_folder_path}-st/{} \; 
        find . -type f -exec mv {} ${jz_pj_folder_path}-st/{} \;
    )
    
    log_success "Succesfully added feature ${feature_name}."
}

plugin_main_cmd() {

    case $1 in
        -h|--help)
        usage
        exit 0
        ;;
    esac

    if [ "$#" -ne 2 ]; then
        usage
        exit 1
    fi

    local project_name=$1
    shift
    local feature_name=$1
    shift

    while [ $# -gt 0 ]; do
    case "$1" in
        *)
        log_err "Invalid argument"
        exit 1
    esac
    shift
    done

    #if [ ! -f .jeeezmeta ]; then
    #    log_err "No .jeeezmeta-file found."
    #    log_err "Did you run it from within a generated project?"
    #fi

    to_project_coordinates $project_name
    
    jz_pj_folder_name=$jz_pj_artifactid
    jz_pj_folder_path=$(pwd)/$jz_pj_folder_name

    infer_project_details $jz_pj_folder_name
    add_feature $feature_name
}

plugin_main_cmd "$@"