#!/usr/bin/env bash
set -eo pipefail; [[ $JZ_TRACE ]] && set -x
source "$PLUGIN_PATH/common/functions"

write_metadata_file() {
    echo "jz_pj_build=$_build" > .jeeezmeta
    echo "jz_pj_template=$_template" >> .jeeezmeta
}

source_metadata_file() {
    source .jeeezmeta
}

to_project_coordinates() {
    if [[ $(expr index "$project_name" .) != "0" ]] ; then
        # project-name contains dot and thus a group-id
        jz_pj_groupid=$(echo "$project_name" | rev | cut -d"." -f2-  | rev)
        jz_pj_artifactid=$(echo "$project_name" | rev | cut -d"." -f1  | rev)
    else
        jz_pj_groupid="jz"
        jz_pj_artifactid="$project_name"
    fi
}

infer_project_details() {
    if [ -f build.gradle ]; then
        jz_project_build="gradle"
    else
        jz_project_build="maven"
    fi
    
    if [[ "$jz_project_build" == "gradle" ]]; then
        if [ -f *-ear/build.gradle ]; then
            jz_project_apptype="ear"
        else
            jz_project_apptype="war"
        fi
    else
        if [ -f *-ear/pom.xml ]; then
            jz_project_apptype="ear"
        else
            jz_project_apptype="war"
        fi
    fi
}

rewrite_app_archive_path() {
    if [[ "$jz_pj_folder_name" == *-st ]]; then
        relevant_build=$(cd $jz_pj_artifactid; infer_project_details; echo $jz_project_build)
        relevant_apptype=$(cd $jz_pj_artifactid; infer_project_details; echo $jz_project_apptype)
        log_info "Main project detected: build=$relevant_build, apptype=$relevant_apptype."
    else
        relevant_build=$(cd $work_folder_name; infer_project_details; echo $jz_project_build)
        relevant_apptype=$(cd $work_folder_name; infer_project_details; echo $jz_project_apptype)
    fi

    if [[ "$relevant_build" == "maven" ]]; then
        if [[ "$relevant_apptype" == "ear" ]]; then
            # if ear -> template-artifactid-ear/target/template-artifactid.war
            app_archive_path="template-artifactid-ear/target"
            app_archive="template-artifactid.ear"
        else
            # if war -> target/template-artifactid.war
            app_archive_path="target"
            app_archive="template-artifactid.war"
        fi  
    else
        if [[ "$relevant_apptype" == "ear" ]]; then
            # if ear -> template-artifactid-ear/build/libs/template-artifactid.war
            app_archive_path="template-artifactid-ear/build/libs"
            app_archive="template-artifactid.ear"
        else
            # if war -> default
            app_archive_path="build/libs"
            app_archive="template-artifactid.war"
        fi
    fi

    find $jz_pj_folder_name -type f -and \( -name "*.yml" -or -name "run_docker.sh" \) -exec sed -i "s:build/libs:$app_archive_path:g" {} \;
    find $jz_pj_folder_name -type f -and \( -name "*.yml" -or -name "run_docker.sh" \) -exec sed -i "s:template-artifactid\.war:$app_archive:g" {} \;
}

delete_unused_build_files() {
    if [[ "$_build" == "maven" ]]; then
        rm -rf $jz_pj_folder_name/gradle
        rm -f $jz_pj_folder_name/gradlew*
        find $jz_pj_folder_name -type f -name "*.gradle" -exec rm -f {} \;
    elif [[ "$_build" == "gradle" ]]; then
        rm -rf $jz_pj_folder_name/.mvn
        rm -f $jz_pj_folder_name/mvnw*
        find $jz_pj_folder_name -type f -name "pom.xml" -exec rm -f {} \;
    fi
}

apply_template() {
    local template_name=$1
    local work_folder_name=$2

    cp -r $PLUGIN_PATH/project/templates/$template_name $work_folder_name

    find $work_folder_name -type d -name "packagename" | while read dir; do
        # Derive packagenames from groupid/artifactid
        local parent=$(dirname $dir)
        local artifact_dir="${jz_pj_artifactid//-/}"
        local package_dirs="${jz_pj_groupid//.//}/${artifact_dir}"
        local package_path="$parent/$package_dirs"
        mkdir -p "$package_path"
        mv $dir/* $package_path/ || true
        rm -rf $dir
    done

    # Fix packagenames in Java-code
    local java_package_name="${jz_pj_groupid}.${jz_pj_artifactid//-/}"
    find $work_folder_name -type f \( -name "*.java" -o -name "build.gradle" \) -exec sed -i "s/packagename/${java_package_name}/g" {} \;

    # Fix subproject folder-names
    find $work_folder_name -type d -name "template-artifactid-*" | while read file; do \
        #dir=$(dirname $f)
        #file=$(basename $f)
        #rename "s/template-artifactid-(.*)\$/$jz_pj_artifactid-\$1/" $f
        newfile=${file/template-artifactid/$jz_pj_artifactid}
        mv $file $newfile
    done;

    delete_unused_build_files

    # this need to happen before generic replace of template-artifactid
    rewrite_app_archive_path

    # Set groupid/artifactid in pom.xml/build.gradle
    find $work_folder_name -type f -exec sed -i "s/template-artifactid/${jz_pj_artifactid}/g" {} \;
    find $work_folder_name -type f -exec sed -i "s/template-groupid/${jz_pj_groupid}/g" {} \;
}
